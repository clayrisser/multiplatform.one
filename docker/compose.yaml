services:
  dev:
    container_name: dev
    image: busybox
    command: tail -f /dev/null
    depends_on:
      - grafana
      - keycloak
      - loki
      - postgres
      - prometheus
      - promtail
      # - sentry-web
      # - sentry-worker
      - tempo

  app:
    container_name: ${NAME}
    image: ${IMAGE}:latest
    user: 0:0
    network_mode: host
    ports:
      - 5000:5000
    environment:
      API_BASE_URL: http://localhost:5000/api
      BASE_URL: http://localhost:5000
      DEBUG: '1'
      KEYCLOAK_ADMIN_PASSWORD: P@ssw0rd
      KEYCLOAK_ADMIN_USERNAME: admin
      KEYCLOAK_BASE_URL: http://localhost:8080
      KEYCLOAK_CLIENT_ID: app
      KEYCLOAK_CLIENT_SECRET: P@ssw0rd
      KEYCLOAK_PUBLIC_CLIENT_ID: app-public
      KEYCLOAK_REALM: main
      POSTGRES_HOSTNAME: localhost
    depends_on:
      - grafana
      - keycloak
      - loki
      - postgres
      - prometheus
      - promtail
      # - sentry-web
      # - sentry-worker
      - tempo

  keycloak:
    container_name: keycloak
    restart: unless-stopped
    image: registry.gitlab.com/bitspur/multiplatform.one/multiplatform.one/keycloak
    platform: linux/amd64
    ports:
      - 8080:8080
    volumes:
      - ../platforms/keycloak/docker/realm-export.json:/tmp/realm-export.json:ro
    command:
      - start
      - --optimized
    environment:
      KC_DB_URL_DATABASE: postgres
      KC_DB_URL_HOST: postgres-keycloak
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: P@ssw0rd
      KEYCLOAK_IMPORT: /tmp/realm-export.json
    depends_on:
      - postgres-keycloak

  postgres:
    container_name: postgres
    restart: unless-stopped
    image: postgres:14.5
    ports:
      - 5432:5432
    environment:
      POSTGRES_DATABASE: '${POSTGRES_DATABASE}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_USER: '${POSTGRES_USERNAME}'
    volumes:
      - postgres:/var/lib/postgresql/data

  postgres-keycloak:
    container_name: postgres-keycloak
    restart: unless-stopped
    image: postgres:14.5
    environment:
      POSTGRES_DATABASE: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    volumes:
      - postgres-keycloak:/var/lib/postgresql/data

  tempo:
    container_name: tempo
    user: 0:0
    restart: unless-stopped
    image: grafana/tempo:2.3.1
    command: ['-config.file=/etc/tempo.yaml']
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    ports:
      - 14268:14268
      - 3200:3200
      - 4317:4317
      - 4318:4318
      - 9095:9095
      - 9411:9411

  k6-tracing:
    image: ghcr.io/grafana/xk6-client-tracing:latest
    environment:
      - ENDPOINT=tempo:4317
    restart: always
    depends_on:
      - tempo

  loki:
    container_name: loki
    user: 0:0
    restart: unless-stopped
    image: grafana/loki:2.9.3
    command: -config.file=/etc/loki/loki-local.yaml
    ports:
      - 3100:3100
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces
      - JAEGER_SAMPLER_PARAM=1
      - JAEGER_SAMPLER_TYPE=const
    volumes:
      - ./loki.yaml:/etc/loki/loki-local.yaml
      - loki:/tmp/loki

  promtail:
    container_name: promtail
    user: 0:0
    restart: unless-stopped
    image: grafana/promtail:2.8.7
    command: -config.file=/etc/promtail/promtail-local.yaml
    volumes:
      - ./promtail.yaml:/etc/promtail/promtail-local.yaml
      - ./data/logs:/app/logs
    depends_on:
      - loki

  prometheus:
    container_name: prometheus
    user: 0:0
    restart: unless-stopped
    image: prom/prometheus:v2.49.1
    extra_hosts:
      - host.docker.internal:host-gateway
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus.yaml:/etc/prometheus.yaml
    ports:
      - '9090:9090'

  grafana:
    container_name: grafana
    user: 0:0
    restart: unless-stopped
    image: grafana/grafana:10.2.2
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - tempo
      - loki

  # sentry-postgres:
  #   container_name: sentry-postgres
  #   restart: unless-stopped
  #   image: postgres:14.5
  #   volumes:
  #     - sentry-postgres:/var/lib/postgresql/data

  # sentry-redis:
  #   container_name: sentry-redis
  #   restart: unless-stopped
  #   image: 'redis:6.2.13-alpine'
  #   volumes:
  #     - sentry-redis:/data

  # sentry-web:
  #   container_name: sentry-web
  #   restart: unless-stopped
  #   image: sebinn09/sentry-selfhosted:sentry-self-hosted-local
  #   depends_on:
  #     - sentry-redis
  #     - sentry-postgres
  #   entrypoint: /etc/sentry/entrypoint.sh
  #   command: [run, web]
  #   environment:
  #     PYTHONUSERBASE: /data/custom-packages
  #     SENTRY_CONF: /etc/sentry
  #   volumes:
  #     - sentry-web:/data
  #     - ./sentry:/etc/sentry

  # sentry-worker:
  #   restart: unless-stopped
  #   image: sebinn09/sentry-selfhosted:sentry-cleanup-self-hosted-local
  #   depends_on:
  #     - sentry-redis
  #     - sentry-postgres
  #   entrypoint: /etc/sentry/entrypoint.sh
  #   command: [run, worker]
  #   environment:
  #     PYTHONUSERBASE: /data/custom-packages
  #     SENTRY_CONF: /etc/sentry
  #   volumes:
  #     - sentry-worker:/data
  #     - ./sentry:/etc/sentry

volumes:
  sentry-redis:
    name: sentry-redis-${NAME}
  sentry-postgres:
    name: sentry-postgres-${NAME}
  sentry-web:
    name: sentry-web-${NAME}
  sentry-worker:
    name: sentry-worker-${NAME}
  postgres:
    name: postgres-${NAME}
  postgres-keycloak:
    name: postgres-keycloak-${NAME}
  tempo:
    name: tempo-${NAME}
  loki:
    name: loki-${NAME}
