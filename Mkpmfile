include $(MKPM)/mkpm
include $(MKPM)/gnu
include $(MKPM)/envcache
include $(MKPM)/dotenv
include $(MKPM)/chain
include $(MKPM)/yarn

ACTIONS += deps
$(ACTION)/deps: $(PROJECT_ROOT)/package.json $(call workspace_paths,package.json)
	@$(YARN) install $(DEPS_ARGS)
	@$(call done,$@)

ACTIONS += format
$(ACTION)/format: $(call git_deps,\.((json)|(md)|([jt]sx?))$$)
	@$(call workspace_foreach,format,$(FORMAT_ARGS))
	@$(call done,$@)

ACTIONS += spellcheck
$(ACTION)/spellcheck: $(call git_deps,\.(md)$$)
	@$(call workspace_foreach,spellcheck,$(SPELLCHECK_ARGS))
	@$(call done,$@)

ACTIONS += lint
$(ACTION)/lint: $(call git_deps,\.([jt]sx?)$$)
	@$(call workspace_foreach,lint,$(LINT_ARGS))
	@$(call done,$@)

ACTIONS += test
$(ACTION)/test: $(call git_deps,\.([jt]sx?)$$)
	@$(call workspace_foreach,test,$(TEST_ARGS))
	@$(call done,$@)

PLATFORMS := $(shell $(LS) platforms)
.PHONY: $(patsubst %,%/%,$(PLATFORMS))
$(patsubst %,%/%,$(PLATFORMS)):
	@$(call make,platforms/$(@D)) $*

PACKAGES := \
	multiplatform.one \
	prisma-scripts \
	keycloak \
	typegraphql \
	keycloak-typegraphql \
	components
.PHONY: $(patsubst %,%/%,$(PACKAGES))
$(patsubst %,%/%,$(PACKAGES)):
	@$(call make,packages/$(@D)) $*

.PHONY: build
build:
	@$(foreach pkg,$(PACKAGES),$(call make) $(pkg)/$@;)

.PHONY: api/%
api/%:
	@$(call make,api) $*

.PHONY: app/%
app/%:
	@$(call make,app) $*

.PHONY: gql/%
gql/%:
	@$(call make,gql) $*

.PHONY: ui/%
ui/%:
	@$(call make,ui) $*

.PHONY: upgrade
upgrade:
	@$(YARN) upgrade-interactive

.PHONY: clean
clean:
	@$(call workspace_foreach,clean,$(CLEAN_ARGS))
	-@$(MKCACHE_CLEAN)
	-@$(JEST) --clearCache $(NOFAIL)
	-@$(WATCHMAN) watch-del-all $(NOFAIL)
	-@$(GIT) clean -fXd \
		$(MKPM_GIT_CLEAN_FLAGS) \
		$(YARN_GIT_CLEAN_FLAGS) \
		$(NOFAIL)

.PHONY: purge
purge: clean
	@$(GIT) clean -fXd

HELP = help
help: $(MKCHAIN_HELP)
	@$(call workspace_foreach_help,$(MKCHAIN_HELP),$(ARGS))

.PHONY: storybook/docker/%
storybook/docker/%:
	@$(call make,platforms/storybook/docker)  $*

.PHONY: docker/%
docker/%: docker/data/logs/app.log
	@$(call make,docker) $*
docker/data/logs/app.log:
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

.PHONY: prisma/%
prisma/%:
	@$(call make,prisma) $*

.PHONY: api/%
api/%:
	@$(call make,api) $*

.PHONY: kill/%
kill/%:
	@fuser -k $(subst kill/,,$@)/tcp || echo "No process to kill on port $(subst kill/,,$@)"

.PHONY: count
count:
	@$(CLOC) $(shell ($(GIT) ls-files && ($(GIT) lfs ls-files | $(CUT) -d' ' -f3)) | $(SORT) | $(UNIQ) -u)

.PHONY: version
version:
	@$(CHANGESET)
	@$(CHANGESET) version

.PHONY: publish +publish
publish: version ~build +publish
+publish:
	@$(CHANGESET) publish

-include $(call chain)
