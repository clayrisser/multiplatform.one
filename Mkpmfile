# File: /Mkpmfile
# Project: root
# File Created: 19-09-2023 06:04:27
# Author: Clay Risser
# -----
# BitSpur (c) Copyright 2021 - 2023
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

MONOREPO := 1

include $(MKPM)/mkpm
include $(MKPM)/gnu
include $(MKPM)/envcache
include $(MKPM)/dotenv
include $(MKPM)/chain
include $(MKPM)/yarn
include $(PROJECT_ROOT)/shared.mk

ACTIONS += deps ##
$(ACTION)/deps: $(PROJECT_ROOT)/package.json $(call workspace_paths,package.json)
	@$(YARN) install $(DEPS_ARGS)
	@$(MAKE) +build
	@$(call done,$@)

ACTIONS += format ##
$(ACTION)/format: $(call git_deps,\.((json)|(md)|([jt]sx?))$$)
	@$(call workspace_foreach,format,$(FORMAT_ARGS))
	@$(call done,$@)

ACTIONS += spellcheck ##
$(ACTION)/spellcheck: $(call git_deps,\.(md)$$)
	@$(call workspace_foreach,spellcheck,$(SPELLCHECK_ARGS))
	@$(call done,$@)

ACTIONS += lint ##
$(ACTION)/lint: $(call git_deps,\.([jt]sx?)$$)
	@$(call workspace_foreach,lint,$(LINT_ARGS))
	@$(call done,$@)

ACTIONS += test ##
$(ACTION)/test: $(call git_deps,\.([jt]sx?)$$)
	@$(call workspace_foreach,test,$(TEST_ARGS))
	@$(call done,$@)

.PHONY: build +build
build +build:
	@$(MKPM_MAKE) multiplatform.one/$@
	@$(MKPM_MAKE) prisma-scripts/$@
	@$(MKPM_MAKE) keycloak/$@
	@$(MKPM_MAKE) components/$@

.PHONY: upgrade
upgrade: ##
	@$(YARN) upgrade-interactive

.PHONY: clean
clean: ##
	@$(call workspace_foreach,clean,$(CLEAN_ARGS))
	-@$(MKCACHE_CLEAN)
	-@$(JEST) --clearCache $(NOFAIL)
	-@$(WATCHMAN) watch-del-all $(NOFAIL)
	-@$(GIT) clean -fXd \
		$(MKPM_GIT_CLEAN_FLAGS) \
		$(YARN_GIT_CLEAN_FLAGS) \
		$(NOFAIL)

.PHONY: purge
purge: clean ##
	@$(GIT) clean -fXd

.PHONY: $(patsubst %,%/%,$(WORKSPACE_NAMES))
$(patsubst %,%/%,$(WORKSPACE_NAMES)):
	@$(MKPM_MAKE) -C $(call map_workspace,$(@D)) $*

HELP = help
help: $(MKCHAIN_HELP)
	@$(call workspace_foreach_help,$(MKCHAIN_HELP),$(ARGS))

.PHONY: storybook/docker/%
storybook/docker/%:
	@$(MKPM_MAKE) -C platforms/storybook/docker $*

.PHONY: docker/%
docker/%:
	@$(MKPM_MAKE) -C docker $*

.PHONY: prisma/%
prisma/%:
	@$(MKPM_MAKE) -C api prisma/$*

.PHONY: gen/%
gen/%:
	@npx turbo generate $(subst  gen/,,$@)

.PHONY: api/%
api/%:
	@$(MKPM_MAKE) -C api $*

.PHONY: gen
gen:
	@npx turbo generate

.PHONY: kill/%
kill/%:
	@fuser -k $(subst kill/,,$@)/tcp || echo "No process to kill on port $(subst kill/,,$@)"

.PHONY: count
count:
	@$(CLOC) $(shell ($(GIT) ls-files && ($(GIT) lfs ls-files | $(CUT) -d' ' -f3)) | $(SORT) | $(UNIQ) -u)

.PHONY: version
version:
	@$(CHANGESET)
	@$(CHANGESET) version

.PHONY: publish +publish
publish: version ~build +publish
+publish:
	@$(CHANGESET) publish

-include $(call chain)
