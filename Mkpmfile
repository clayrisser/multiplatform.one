# File: /Mkpmfile
# Project: root
# File Created: 04-04-2024 15:50:39
# Author: Clay Risser
# -----
# BitSpur (c) Copyright 2021 - 2024
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include $(MKPM)/mkpm
include $(MKPM)/chain
include $(MKPM)/dotenv

PACKAGES := $(shell $(LS) packages)
PLATFORMS := $(shell $(LS) platforms)
DOCKER ?= docker

ACTIONS += deps
$(ACTION)/deps: package.json \
	$(patsubst %,packages/%/package.json,$(PACKAGES)) \
	$(patsubst %,platforms/%/package.json,$(PLATFORMS)) \
	api/package.json \
	app/package.json
	@$(PNPM) install
	@$(call done,$@)

.PHONY: $(patsubst %,%/%,$(PLATFORMS))
$(patsubst %,%/%,$(PLATFORMS)):
	@$(call make,platforms/$(@D)) $*

.PHONY: $(patsubst %,%/%,$(PACKAGES))
$(patsubst %,%/%,$(PACKAGES)):
	@$(call make,packages/$(@D)) $*

.PHONY: api/%
api/%:
	@$(call make,api) $*

.PHONY: app/%
app/%:
	@$(call make,app) $*

.PHONY: update
update:
	@$(PNPM) update -ri

.PHONY: clean
clean:
	-@$(MKCACHE_CLEAN)
	-@$(WATCHMAN) watch-del-all $(NOFAIL)
	-@$(GIT) clean -fxd \
		$(MKPM_GIT_CLEAN_FLAGS)

.PHONY: purge
ifneq (/home/frappe,$(HOME))
purge: docker/down clean
else
purge: clean
endif
	-@rm -rf frappe/frappe-bench
	-@$(GIT) clean -fxd

.PHONY: storybook/docker/%
storybook/docker/%:
	@$(call make,platforms/storybook/docker)  $*

.PHONY: docker/%
docker/%: docker/data/logs/app.log
	@$(call make,docker) $*
docker/data/logs/app.log:
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

.PHONY: prisma/%
prisma/%:
	@$(call make,prisma) $*

.PHONY: api/%
api/%:
	@$(call make,api) $*

.PHONY: frappe/%
frappe/%:
	@$(call make,frappe) $*

.PHONY: version
version:
	@$(CHANGESET)
	@$(CHANGESET) version

.PHONY: publish
publish: version build
	@$(CHANGESET) publish

.PHONY: doctor
doctor:
	@$(GIT) clean -fxd -e .mkpm
	@$(RM) -rf $(HOME)/.local/state/frappe $(NOFAIL)
	@$(RM) -rf frappe/frappe-bench $(NOFAIL)
	@$(DOCKER) pull $(DOCKER_REGISTRY)/devcontainer:latest

.PHONY: spellcheck-prune
spellcheck-prune:
	-@$(MV) cspell.json _cspell.json $(NOFAIL)
	@M="$$($(PNPM) cspell --words-only --unique --no-progress --no-summary \
		`($(GIT) ls-files && ($(GIT) lfs ls-files | $(CUT) -d' ' -f3)) | $(SORT) | $(UNIQ) -u | \
		$(GREP) -v project-words.txt` 2>&1 | $(AWK) '{if ($$0 ~ /^[\x00-\x7F]*$$/) print $$0}' | $(TR) '[:upper:]' '[:lower:]' | $(SORT))" && \
		D="$$($(CAT) project-words.txt)" && \
		(echo "$$M" && echo "$$D") | $(SORT) | $(UNIQ) -d | $(TEE) _project-words.txt
	@$(MV) _cspell.json cspell.json
	@$(MV) _project-words.txt project-words.txt

.PHONY: down
down:
	@$(DOCKER) rm -f $$($(DOCKER) ps --filter "name=devcontainer" -a -q) $(NOFAIL)
	@for v in $$($(DOCKER) volume ls --filter "name=devcontainer" -q); do \
		$(DOCKER) rm -f $$($(DOCKER) ps -a -q --filter volume=$$v) $(NOFAIL); \
		$(DOCKER) volume rm -f $$v || true; \
	done
	@$(DOCKER) rm -f $$($(DOCKER) ps -a -q --filter network=$$($(DOCKER) network ls --filter "name=devcontainer" -q)) $(NOFAIL)
	@$(DOCKER) network ls --filter "name=devcontainer" -q | $(XARGS) -r $(DOCKER) network rm || $(TRUE)

.PHONY: stop
stop:
	@$(DOCKER) stop $$($(DOCKER) ps --filter "name=devcontainer" -q)

SCRIPTS := $(shell $(CAT) package.json | $(JQ) -r '(.scripts | keys)[]')
.PHONY: $(SCRIPTS)
$(SCRIPTS): ~deps
	@$(PNPM) run $@

-include $(call chain)
