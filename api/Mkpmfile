include $(MKPM)/mkpm
include $(MKPM)/gnu
include $(MKPM)/chain
DOTENV ?= $(PROJECT_ROOT)/.env
include $(MKPM)/dotenv
include $(MKPM)/yarn

BUILD_SCHEMA ?= $(NODE) $(PROJECT_ROOT)/api/bin/buildSchema.js

ACTIONS += deps
$(ACTION)/deps: $(PROJECT_ROOT)/package.json package.json
	@$(call make,$(PROJECT_ROOT)) \~deps DEPS_ARGS=$(DEPS_ARGS)
	@$(call done,$@)

ACTIONS += generate~deps
GENERATE_TARGETS := generated/type-graphql/index.ts
generated/type-graphql/index.ts:
	@$(call reset,generate)
$(ACTION)/generate: $(call git_deps,\.(prisma)$$)
	@$(call make,prisma) generate
	@$(call done,$@)

ACTIONS += format~generate
$(ACTION)/format: $(call git_deps,\.((json)|(md)|([jt]sx?))$$)
#	-@$(call eslint_format,$?)
	-@$(call prettier,$?,$(FORMAT_ARGS))
	@$(call done,$@)

ACTIONS += spellcheck~format
$(ACTION)/spellcheck: $(call git_deps,\.(md)$$)
	-@$(call cspell,$?,$(SPELLCHECK_ARGS))
	@$(call done,$@)

ACTIONS += lint~spellcheck
$(ACTION)/lint: $(call git_deps,\.([jt]sx?)$$)
	-@$(call eslint,$?,$(LINT_ARGS))
	@$(call done,$@)

ACTIONS += test~lint
$(ACTION)/test: $(call git_deps,\.([jt]sx?)$$)
	-@$(call jest,$?,$(TEST_ARGS))
	@$(call done,$@)

ACTIONS += build~test
BUILD_TARGETS := dist/index.js
dist/index.js:
	@$(call reset,build)
$(ACTION)/build: $(call git_deps,\.([jt]sx?)$$)
	@$(TSUP)
	@$(BUILD_SCHEMA)
	@$(call done,$@)

.PHONY: watch
watch: ~generate
	@$(TSUP) --watch '**/*.ts' $(WATCH_ARGS)

.PHONY: dev prelaunch
dev: prelaunch +dev
prelaunch: prisma/dev docker/dev-d
+dev:
	@$(call make) watch \
		WATCH_ARGS="--onSuccess ' \
			$(BUILD_SCHEMA) && \
			NODE_ENV=development $(NODE) bin/main.js'"

.PHONY: clean
clean:
	-@$(MKCACHE_CLEAN)
	-@$(JEST) --clearCache $(NOFAIL)
	-@$(WATCHMAN) watch-del-all $(NOFAIL)
	-@$(GIT) clean -fXd \
		$(MKPM_GIT_CLEAN_FLAGS) \
		$(YARN_GIT_CLEAN_FLAGS) \
		$(NOFAIL)

.PHONY: prisma/%
prisma/%: ~deps
	@$(call make,prisma) $*

.PHONY: docker/%
docker/%: $(PROJECT_ROOT)/docker/data/logs/app.log
	@$(CD) $(PROJECT_ROOT) && $(call make,docker) $*
$(PROJECT_ROOT)/docker/data/logs/app.log:
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

-include $(call chain)
